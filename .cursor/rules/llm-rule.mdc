---
description: 
globs: 
alwaysApply: true
---
# Developer Introduction (all projects):
This guide establishes the foundation for effective development collaboration. Before writing any code, developers should thoroughly understand the project requirements, specifications, and development approach. Successful projects begin with clarity and comprehensive planning rather than jumping directly into implementation.


## Managed Expectations:
Before learning about the specific project, you will receive three critical information payloads:

1. **Development Workflow Requirements** - The step-by-step process for development, documentation, and verification
2. **Development Best Practices** - Core principles for maintainable, high-quality code development
3. **Development Technical Specifications** - Universal technical guidelines for repository structure, data management, etc.

These represent strict guidelines that must be followed throughout the development process. After receiving each payload, do not proceed with implementation - simply acknowledge understanding and commitment to following these standards.

The final information you'll receive will be:

4. **Project Specifications** - Project-specific details including identity, features, frameworks, and design requirements

Only after receiving and acknowledging ALL information should you confirm readiness to begin the project. Do not start coding until explicitly instructed to do so.



# Development Workflow Requirements (all projects):
### Verification Requirements
When implementing each step of the workflow:
- NEVER mark any step as complete without providing verifiable evidence
- Proceed with code as pair programming usually would, but with you as the driver and navigator
- During your pair programming steps, I will be the observer and assistant and have the ultimate say
- Include specific command outputs, test results, or screenshots as proof
- For testing specifically, report actual test coverage percentages and results
- Document any challenges or limitations encountered during implementation
- If a step cannot be fully completed, document the blockers transparently
- Prioritize accuracy over claiming completion

### Step 1: Dependency Installation
Install all project dependencies with latest compatible versions. Resolve any errors without using --legacy-peer-deps or any other flags to force-circumvent compatibility issues. This step includes the fleshing out the necessary project files and directories while making use of best practices for the frameworks and libraries you are told to use. Document installation process in `context-for-llm/01-dependency-installation.md`. Initialize the git repo and commit all changes.

### Step 2: Project Structure Documentation
Ensure the file and directory structure is correct and architecture is sound for making use of the initial files and directories according to the frameworks and libraries you are told to use. Create `context-for-llm/02-project-structure.md` detailing project initialization, directory structure, and package selection. Document should enable complete project recreation. Commit all changes.

### Step 3: Linting Configuration
Configure and run linter across all files. Fix all TypeScript, ESLint, and any other linter or langauge engine errors or warnings. You will not stop until all are fixed. Summarize corrections in `context-for-llm/03-linting-corrections.md`. Commit all changes.

### Step 4: Testing Implementation
Develop and run all tests and ensure full coverage of components, functions, and state management. Add missing tests as needed as you make your way through the codebase. Also, create and maintain the CI workflow for GitHub as you proceed with fleshing out the tests. Make sure they're compatible and effectively able to run with GitHub Actions. Update README.md with test instructions. Document test results in `context-for-llm/04-test-summary.md`. Commit all changes.

### Step 5: Build Process
Execute build commands and resolve any errors or warnings. Simplify into npm scripts for various build scenarios. Remember, one of the goals could be to run the build on the server with a reverse proxy and SSL certificate, while another potential might be targeting Cloudflare Pages or GitHub Pages. Should any build issues or linter errors arise, be sure to fix them and containue to maintain our tests and CI workflow. Update README.md with build instructions. Document in greater detail in `context-for-llm/05-build-summary.md`. Commit all changes.

### Step 6: Deployment Setup
For testing and what might could become the final deployment, be sure to install nginx and set up a reverse proxy and SSL via certbot. Fix any deployment issues, while maintaining our tests and CI workflow. Update README.md with deployment instructions. Document process including firewall configuration in `context-for-llm/06-deployment-summary.md`. Commit all changes.

### Step 7: Future-Proofing
Update all packages to latest stable versions. Add future maintenance guidelines to README. Create `context-for-llm/07-future-updates.md` explaining future-proofing strategy in detail while summarizing the correct approach for future updates in the README.md file. Commit all changes.

### Step 8: Feature Extension Guide
Document process for adding new features, including linter/test/build updates with comprehensive guidance for extending the project in detail in `context-for-llm/08-additional-features.md`. Provide  a summary of the correct approach for feature extension in the README.md file. Commit all changes.


# Development Best Practices:
When approaching this project, adhere to these foundational principles:

1. **Context Awareness**
   - Always verify you're working on the correct project and branch
   - Review the existing file structure before adding new files
   - Understand the purpose and scope of each file you modify
   - Consider how your changes affect the overall architecture
   - Use `tree` command to visualize directory structure (install with `sudo apt install -y tree` if needed)
   - Leverage code exploration tools like:
     - `grep`/`ripgrep` for searching code patterns
     - IDE symbol search features for function/component discovery
     - Static analyzers for dependency graphs
     - `npm list` or `yarn why` to understand package relationships
     - TypeScript language server to explore type definitions
     - ESLint output to understand code standards

2. **Code Organization**
   - Follow established project patterns and conventions
   - Group related functionality in appropriate directories
   - Don't duplicate existing functionality or create parallel implementations
   - Use descriptive, consistent naming that aligns with project conventions

3. **Quality Standards**
   - Apply DRY (Don't Repeat Yourself) principles through reusable components and functions
   - Write self-documenting code with appropriate comments for complex logic
   - Implement proper error handling and edge case management
   - Keep functions focused on single responsibilities

4. **Modification Safety**
   - Make incremental changes that can be easily tested and reviewed
   - Test your changes thoroughly before considering work complete
   - Validate that your changes don't break existing functionality
   - Prefer extending existing patterns rather than introducing new ones

5. **Uncertainty Management**
   - When unsure about implementation approach, research project patterns first
   - Reference existing code for guidance before introducing new patterns
   - Document any assumptions made during implementation
   - Ask specific questions rather than making uninformed decisions

6. **Environment Awareness**
   - When running terminal commands, anticipate and handle prompts that require responses
   - Don't pause workflows on obvious confirmations like "Ok to proceed? (y)"
   - Practice safe command execution and NEVER run destructive commands like rm -rf /*
   - Wait for full command completion (bash prompt $ or #) before proceeding
   - Always activate appropriate virtual environments before running Python code
   - For Python, use `source .venv/bin/activate` before executing tests or scripts

7. **Verification Standards**
   - Never mark any step as complete without providing verifiable evidence
   - Include specific command outputs, test results, or screenshots as proof
   - For testing specifically, report actual test coverage percentages and results
   - Document any challenges or limitations encountered during implementation
   - If a step cannot be fully completed, document the blockers transparently
   - Prioritize accuracy over claiming completion



# Development Technical Specifications (all projects):

## Repository Structure:
It is important to follow the repository structure below. The working directory has already been created and described above as the repository name. It should be used as the project root. When initializing the project:

1. DO NOT create another directory inside this folder
2. DO NOT run commands like `npx create-react-app new-directory-name` or `expo init new-directory-name`
3. DO use the current directory for all setup (e.g., `npx create-react-app .` or `expo init .`)
4. All files should be placed directly in the existing directory specified above which is the repository name.
5. This directory will be the Git repository root

## Data Management:
- Implement a centralized observable store with strict TypeScript interfaces
- Set data freshness parameters per data type to control update frequency
- Fetch data lazily as components require it, avoiding unnecessary loading
- Prune stale data when no longer observed while preserving navigation state
- Use framework-specific routing for seamless screen transitions with history support

## Styling:
- Minimalist, clean design with focus on readability
- Fully responsive layout with minimal inline styles 
- Consistent component usage throughout the application
- Dark/light theme toggle that respects system settings initially
- Theme preference stored for persistence across sessions

PWA:
- Implement full Progressive Web App capabilities
- Include manifest.json, service worker, and web app icons
- Enable offline functionality and home screen installation

## Code Quality:
- Write concise, efficient code using TypeScript throughout
- Configure ESLint to enforce strict TypeScript standards
- Use latest stable package versions without dependency compromises
- Avoid flags like --legacy-peer-deps or --force when installing packages

## Testing:
- Comprehensive Jest tests for all functions, components, and state management
- Headless browser testing with Cypress for E2E validation
- GitHub workflow for CI integration with matching CLI and CI test capabilities
- Test coverage should scale with code additions

## Documentation & Deployment:
- Comprehensive README with complete setup and installation instructions
- Ubuntu server deployment guide with dependency installation steps
- Testing guide with expected results and CI verification steps
- Production deployment with nginx reverse proxy and SSL via certbot
- Include configuration templates and firewall setup instructions



# Project Specifications (project-specific):

## Identity:
The title of the project is "Open Libra Explorer" and is inspired by the 0L project which is a layer one blockchain which is a fork of the Libra blockchain by Facebook.

The repository name should be called ol-explorer and does not yet exist.

## Features Overview:
This blockchain explorer application provides a user-friendly interface to explore blockchain data through the following features:
- Real-time display of block height, epoch, chain ID, and recent transactions table on the home screen
- Detailed transaction information pages accessed by clicking on transaction entries
- Intelligent search functionality that cascades through account lookup, transaction search, and appropriate error messaging
- Account detail pages showing resources and balance information
- Integration with open-libra-sdk to access all blockchain data through standardized SDK functions rather than direct RPC calls
- Modern, responsive UI with theme support (light/dark modes)
- Full Progressive Web App (PWA) capabilities

## Framework:
Built with React Native, Expo, TypeScript, LegendApp (for observable state management), and NativeWind (for styling) for efficient data handling and seamless user experience.

## Core Features in Detail:

### Home Screen:
- **Blockchain Metrics Cards**: Three separate cards displaying current Block Height (formatted with commas, e.g., "59,510,895"), Current Epoch (e.g., "342"), and Chain Info such as the Chain ID (e.g., "1"), Ledger Timestamp, and Block Time in seconds.
- **Recent Transactions Table**: Displays the X (configurable) most recent transactions with columns for:
  - Block Height: The block number containing the transaction (formatted with commas, e.g., "59,510,895")
  - Version: Transaction version number (formatted with commas, e.g., "111,111,111")
  - From: Account (if available) or Transaction Hash abbreviated (first 4 characters + "..." + last 4 characters) with copy-to-clipboard functionality
  - Function: Transaction type displayed in a color-coded badge/pill (e.g., "state_checkpoint", "block_metadata")
  - Time: Formatted timestamp (e.g., "Mar 26, 2025, 10:23:32 AM")
- **Refresh Button**: Animated when an update is running, also allows the user to click to force an update of the transaction list with the latest blockchain data.
- **Search Functionality**: Search bar in the header allowing users to search by account or transaction hash

### Transaction Details Page:
- **Transaction Header**: Full transaction hash display with copy functionality
- **Transaction Information Card**:
  - Type: Transaction type (e.g., "block_metadata_transaction")
  - Status: Transaction status with color indicator (e.g., green "Success" badge, red "Failed" badge, or gray "Pending" badge)
  - Timestamp: Formatted date and time
  - Sender: Account address with copy functionality
  - Gas Used: Amount of gas consumed by the transaction
- **Events Section**: JSON-formatted display of transaction events with syntax highlighting
  - Event data is properly indented and formatted for readability
  - Each event shows relevant blockchain data (epoch, hash, height, proposer, etc.)

### Account Details Page:
- **Account Header**: Account address with copy functionality
- **Balance Information**: 
  - Prominent display of account balance with full precision (e.g., "79,345,836.000261 LIBRA")
  - Secondary display showing base units (e.g., "79345836000261 base units")
- **Resources Section**: 
  - Resources count display (e.g., "15 resources found")
  - Tab-based navigation system with buttons for each resource type
  - Available resource types displayed as clickable buttons (Account, Ancestry, BurnTracker, CoinStore, FeeMaker, etc.)
  - Selected resource highlighted with different styling
  - JSON data display for the selected resource with syntax highlighting and proper formatting
  - Resource type identifier shown above JSON data (e.g., "0x1::ol_account::BurnTracker")

### Routing and Data Management:
- **Single Fetch Architecture**:
  - The application fetches all account data in a single API call for efficiency
  - The complete account object contains all resources, balance information, and metadata
  - This approach minimizes network requests and improves performance
- **URL-based Navigation**:
  - URL routes updated to reflect the currently selected resource (e.g., `/account/[address]/resources/[resourceType]`)
  - Direct linking to specific account resources is supported via URL
  - Browser history is properly maintained as users navigate between resources
  - The state is preserved when navigating back/forward using browser controls
- **Component Rendering**:
  - Only the relevant portion of the account data is rendered based on the selected resource
  - The UI updates immediately when switching resources as data is already available
  - No loading states needed between resource views after initial fetch

### Search Functionality Implementation
- The search bar accepts input for either account addresses or transaction hashes
- Search process:
  1. First attempts to find an account matching the input
  2. If no account is found, attempts to find a transaction matching the input
  3. If no results are found, displays appropriate "not found" message
- Search results are cached in the store for quick access when revisiting

### Design:
The application follows a dark theme with the following design elements:
- Dark navy background throughout the application
- Card-based layout with rounded corners and subtle elevation shadows
- White text on dark backgrounds for optimal readability
- Monospaced fonts for transaction hashes, addresses, and technical data
- Sans-serif fonts for headings and general UI text
- Color-coded function tags (state_checkpoint, block_metadata) for transaction types
- Copy-to-clipboard functionality for hash values and addresses
- Clean, minimalist header with Open Libra logo, search bar, and search button
- Tabular data presentation with clear column headers
- Success indicators with green background
- JSON/code displays with syntax highlighting in dark mode
- Responsive metrics cards displaying Block Height, Epoch, and Chain ID prominently
- Refresh button for transaction data
- Footer with navigation links to documentation and GitHub

### Search Component Design:
- Prominent search bar spanning most of the header width
- Input field with dark semi-transparent background and rounded corners
- Light gray placeholder text "Search by account or tx hash" for user guidance
- Search button integrated at the right side with deeper navy/black background
- Magnifying glass icon paired with "Search" text on the button
- Clear contrast between input field and button for visual distinction
- Focus state with subtle highlight when the user interacts with the search field
- Consistent with the overall application's dark theme
- Responsive design that maintains proportions across different screen sizes

To further inform the design, I've taken screenshots for both the home screen, transaction details page, and account resources page.


## External Dependencies:
This project will only make use of an SDK using the RPC address for all chain data. The RPC should not be accessed directly, only through the functions available in the SDK. The SDK functions should always be used by the client side, and should not be used by the server side.

The SDK will be available from npm and is called open-libra-sdk.

### SDK Implementation:
The SDK should be installed, included in the package dependencies, and integrated through a set of custom React hooks for each function of the SDK that powers the different data types fetched from the SDK.
- Integration with the application's store for state management
- Automatic SDK initialization with error handling and mock data fallbacks
- Core blockchain data functions: block height, epoch, chain ID, transaction listings
- Detailed data retrieval: transaction details by hash, account resources and balances
- Block time calculation based on ledger information
- Normalized handling of blockchain addresses and transaction hashes
- Central data refresh function that updates all blockchain metrics simultaneously

### SDK Integration Examples:

#### RPC Endpoint Configuration
```typescript
// SDK Configuration
const OPENLIBRA_RPC_URL = 'https://rpc.openlibra.space:8080/v1';
```

#### Library Import
```typescript
// Import the SDK
import { LibraClient, Network } from 'open-libra-sdk';

// Initialize the client
const client = new LibraClient(Network.MAINNET, OPENLIBRA_RPC_URL);
```

#### Resource Call Stubs
```typescript
// Get ledger information
const getLedgerInfo = async () => {
  const ledgerInfo = await client.getLedgerInfo();
  return ledgerInfo;
};

// Get recent transactions
const getTransactions = async (limit = 20) => {
  const transactions = await client.getTransactions({ limit });
  return transactions;
};

// Get transaction details by hash
const getTransactionByHash = async (hash: string) => {
  const transaction = await client.getTransactionByHash({ 
    transactionHash: hash.startsWith('0x') ? hash : `0x${hash}` 
  });
  return transaction;
};

// Get account details and resources
const getAccount = async (address: string) => {
  const resources = await client.getAccountResources({ 
    address: address.startsWith('0x') ? address : `0x${address}` 
  });
  const accountInfo = await client.getAccount({ 
    address: address.startsWith('0x') ? address : `0x${address}` 
  });
  return { accountInfo, resources };
};
```

#### Data Structure Definitions
```typescript
// Core data types for the store
export interface BlockchainStats {
  blockHeight: number;
  epoch: number;
  chainId: string;
  blockTimeMs: number;
  lastUpdated: number;
}

export interface Transaction {
  hash: string;
  version: number;
  sender: string;
  sequence_number: number;
  timestamp: number;
  type: string;
  status: 'success' | 'failure' | 'pending';
  gas_used: number;
  gas_unit_price: number;
  block_height: number;
  function?: string;
}

export interface TransactionDetail extends Transaction {
  vm_status: string;
  epoch: string;
  round: string;
  state_change_hash: string;
  event_root_hash: string;
  accumulator_root_hash: string;
  events: Array<{
    type: string;
    data: any;
  }>;
  changes: Array<{
    type: string;
    address: string;
    path: string;
    data: any;
  }>;
  payload: any;
}

export interface Account {
  address: string;
  balance: number;
  sequence_number: number;
  resources: Array<{
    type: string;
    data: any;
  }>;
}
```
